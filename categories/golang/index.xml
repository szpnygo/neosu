<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on NeoSuDoc</title><link>https://neosu.info/categories/golang.html</link><description>Recent content in Golang on NeoSuDoc</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy; 2021 &lt;a href="https://neosu.info/">NeoSu&lt;/a></copyright><lastBuildDate>Wed, 12 May 2021 15:16:29 +0800</lastBuildDate><atom:link href="https://neosu.info/categories/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang面试题</title><link>https://neosu.info/docs/server/golang_interview.html</link><pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate><guid>https://neosu.info/docs/server/golang_interview.html</guid><description>数组与切片 切片是指针类型，数组是值类型 数组的长度是固定的，而切片不是，切片是动态数组 切片比数组多了一个属性，容量 切片的底层是数组 不同长度的数组不能比较</description></item><item><title>Golang实现简单BitSet(二)</title><link>https://neosu.info/posts/golang-bitmap2.html</link><pubDate>Wed, 12 May 2021 15:16:29 +0800</pubDate><guid>https://neosu.info/posts/golang-bitmap2.html</guid><description>上一节中，我们实现了一个基本的BitSet，现在有个需求，计算BitSet中1的个数。 这个需求使用场景很多，比如统计在线用户数量等。之前的实现完成了记</description></item><item><title>Golang实现简单BitSet(一)</title><link>https://neosu.info/posts/golang-bitmap.html</link><pubDate>Mon, 10 May 2021 15:16:29 +0800</pubDate><guid>https://neosu.info/posts/golang-bitmap.html</guid><description>Bitmap (位图)是一个十分有用的数据结构。所谓的 Bit-map 就是用一个 bit 位来标记某个元素对应的 Value，而 Key 即是该元素。由于采用了 Bit 为单位来存储数据，因此在内存占用</description></item></channel></rss>